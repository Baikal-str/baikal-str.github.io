[{"content":"Задача: Копирование базы данных PostgreSQL используя Rundeck Запрос Необходимо предоставить разработчикам возможность копировать БД из прода в среду разработки. Решили использовать Rundeck, упаковать выполнения команд в web, для удобства разработчиков. В ОС с Rundeck установлен postgresql-client.\npg-prod - Сервер СУБД PostgreSQL продуктивный pg-dev - Сервер СУБД PostgreSQL тестовый (работает на порту 5433) citizix_user - пользователь с правами чтения на продуктивном сервере Задача разбита на 8 шагов:\nПроверить наличие старого dump файла Проверить наличие БД на сервере-источнике Создать dump БД Удалить базу данных на сервере назначения Создать пустую базу на сервере назначения Восстановить базу данных на сервере назначения Выполнить Vacuumdb Удалить dump файл Вводные параметры Опции:\nСервер источник Имя базы на сервере источнике Сервер назначения Имя базы на сервере назначения Шаги: В каждом шаге добавлено условие проверки выполнения, при ошибке выполняется exit 1, шаг и в целом задача завершается ошибкой. Возможно всю логику разместить в одном шаге, но с целью удобства отладки скрипт был разделён.\nПроверить наличие старого dump файла 1 2 3 4 5 6 7 8 9 10 11 DIRECTORY=\u0026#34;/db/dump/\u0026#34;$RD_OPTION_PG_DATNAME_S # Проверяем, существует ли директория if [ -f \u0026#34;$DIRECTORY\u0026#34; ]; then echo \u0026#34;Dump существует. Удаление...\u0026#34; rm -r \u0026#34;$DIRECTORY\u0026#34; echo \u0026#34;Dump успешно удалён.\u0026#34; else echo \u0026#34;Dump не существует.\u0026#34; fi Проверить наличие БД на сервере-источнике 1 2 3 4 5 6 7 8 9 10 # Проверяем существование базы данных db_exist=$(/usr/lib/postgresql/15/bin/psql -U citizix_user -h $RD_OPTION_PG_SOURCE_HOST -lqt | awk \u0026#39;{print $1}\u0026#39; | grep -wq $RD_OPTION_PG_DATNAME_S \u0026amp;\u0026amp; echo \u0026#34;true\u0026#34;) if [ -z \u0026#34;$db_exist\u0026#34; ]; then echo \u0026#34;База данных \u0026#39;$RD_OPTION_PG_DATNAME_S\u0026#39; не существует на сервере-источнике. Процесс остановлен.\u0026#34; exit 1 else echo \u0026#34;База данных \u0026#39;$RD_OPTION_PG_DATNAME_S\u0026#39; существует на сервере-источнике. Продолжение процесса...\u0026#34; fi Создать dump БД 1 2 3 4 5 6 7 8 9 10 DUMPFOLDER=\u0026#34;/db/dump/\u0026#34;$RD_OPTION_PG_DATNAME_S /usr/lib/postgresql/15/bin/pg_dump -d $RD_OPTION_PG_DATNAME_S -h $RD_OPTION_PG_SOURCE_HOST -U citizix_user -Fc -f $DUMPFOLDER if [ $? -eq 0 ]; then echo \u0026#34;Резервная копия базы данных $RD_OPTION_PG_DATNAME_S успешно создана.\u0026#34; else echo \u0026#34;Ошибка создания резервной копии базы данных $RD_OPTION_PG_DATNAME_S.\u0026#34; exit 1 fi Удалить базу данных на сервере назначения 1 2 3 4 5 6 7 8 9 10 11 12 13 DDB=$(echo $RD_OPTION_PG_DATNAME_DST | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;) S_PORT=\u0026#34;5433\u0026#34; db_exist=$(/usr/lib/postgresql/15/bin/psql -U citizix_user -p $S_PORT -h $RD_OPTION_PG_DISTANATION_HOST -lqt | cut -d \\| -f 1 | grep -wq $DDB \u0026amp;\u0026amp; echo \u0026#34;true\u0026#34;) # Проверяем if [ -n \u0026#34;$db_exist\u0026#34; ]; then echo \u0026#34;База данных \u0026#39;$DDB\u0026#39; существует. Удаление...\u0026#34; /usr/lib/postgresql/15/bin/dropdb -U citizix_user -h $RD_OPTION_PG_DISTANATION_HOST -p $S_PORT -f $DDB echo \u0026#34;База данных успешно удалена.\u0026#34; else echo \u0026#34;База данных \u0026#39;$DDB\u0026#39; не существует.\u0026#34; fi Создать пустую базу на сервере назначения 1 2 3 4 5 6 7 8 9 10 11 12 13 DDB=$(echo $RD_OPTION_PG_DATNAME_DST | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;) S_PORT=\u0026#34;5433\u0026#34; # Создаем базу данных с указанным tablespace /usr/lib/postgresql/15/bin/createdb -U citizix_user -h $RD_OPTION_PG_DISTANATION_HOST -p $S_PORT --encoding=UTF8 $DDB # Проверяем успешность создания базы данных if [ $? -eq 0 ]; then echo \u0026#34;База данных \u0026#39;$DDB\u0026#39; успешно создана.\u0026#34; else echo \u0026#34;Ошибка при создании базы данных \u0026#39;$DDB\u0026#39;.\u0026#34; exit 1 fi Восстановить базу данных на сервере назначения 1 2 3 4 5 6 7 8 9 10 11 12 13 DUMPFOLDER=\u0026#34;/db/dump/\u0026#34;$RD_OPTION_PG_DATNAME_S DDB=$(echo $RD_OPTION_PG_DATNAME_DST | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;) S_PORT=\u0026#34;5433\u0026#34; /usr/lib/postgresql/15/bin/pg_restore -h $RD_OPTION_PG_DISTANATION_HOST -p $S_PORT -U citizix_user -j 8 -d $DDB $DUMPFOLDER # Проверяем if [ $? -eq 0 ]; then echo \u0026#34;База данных \u0026#39;$DDB\u0026#39; успешно восстановлена.\u0026#34; else echo \u0026#34;Ошибка при восстановлении базы данных \u0026#39;$DDB\u0026#39;.\u0026#34; exit 1 fi Выполнить Vacuumdb 1 2 3 4 5 6 7 8 9 10 11 12 DDB=$(echo $RD_OPTION_PG_DATNAME_DST | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;) S_PORT=\u0026#34;5433\u0026#34; /usr/lib/postgresql/15/bin/vacuumdb -h $RD_OPTION_PG_DISTANATION_HOST -U citizix_user -p $S_PORT -d $DDB # Проверяем if [ $? -eq 0 ]; then echo \u0026#34;Vacuumdb \u0026#39;$DDB\u0026#39; успешно выполнен.\u0026#34; else echo \u0026#34;Ошибка при выполнении Vacuumdb базы данных \u0026#39;$DDB\u0026#39;.\u0026#34; exit 1 fi Удалить dump файл 1 2 3 4 5 6 7 8 9 10 11 12 13 DUMPFOLDER=\u0026#34;/db/dump/\u0026#34;$RD_OPTION_PG_DATNAME_S DUMP_SIZE=$(du -hs $DUMPFOLDER) echo \u0026#34;Размер \u0026#39;$DUMP_SIZE\u0026#39;.\u0026#34; rm -f $DUMPFOLDER # Проверяем if [ $? -eq 0 ]; then echo \u0026#34;Dump\u0026#39;$DUMPFOLDER\u0026#39; успешно удалён.\u0026#34; else echo \u0026#34;Ошибка при удалении dump \u0026#39;$DUMPFOLDER\u0026#39;.\u0026#34; exit 1 fi Итого Доступен весь вывод консоли, удобно использовать при траблшутинге. База скопирована, временные файлы удалены ","date":"2024-06-09T00:00:00Z","image":"http://localhost:1313/p/%D0%BA%D0%BE%D0%BF%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B1%D0%B0%D0%B7%D1%8B-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-postgresql-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D1%83%D1%8F-rundeck/20240609155015_hua9aa59a9588b6f99a36b65cb2dc76599_116348_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/%D0%BA%D0%BE%D0%BF%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B1%D0%B0%D0%B7%D1%8B-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-postgresql-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D1%83%D1%8F-rundeck/","title":"Копирование базы данных PostgreSQL используя Rundeck"},{"content":"Для централизованного хранения логов СУБД использую ELK stack. Порой возникают сложности для правильного парсинга логов, далее в заметке разберём основные моменты настройки конфигурации фильтров Logstash для таких СУБД как: PostgreSQL, Patroni, MySQL, ClickHouse, Redis.\nДля PostgreSQL в параметрах обычно указываю сохранение логов в CSV формате:\n1 2 3 4 5 6 logging_collector = on # Включает сбор логов log_destination = \u0026#39;csvlog\u0026#39; # Формат логов - CSV log_directory = \u0026#39;log\u0026#39; # Папка для хранения логов log_filename = \u0026#39;postgresql-%Y-%m-%d_%H%M%S.csv\u0026#39; # Имя файла логов log_rotation_age = 1d # Интервал ротации логов (1 день) log_rotation_size = 100MB # Максимальный размер файла логов Фильтр в конфигурации Logstash:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # Фильтр для PostgreSQL логов if [type] == \u0026#34;postgresql_csv_log\u0026#34; { csv { separator =\u0026gt; \u0026#34;,\u0026#34; columns =\u0026gt; [ \u0026#34;timestamp\u0026#34;, \u0026#34;username\u0026#34;, \u0026#34;database\u0026#34;, \u0026#34;pid\u0026#34;, \u0026#34;client_addr\u0026#34;, \u0026#34;session_id\u0026#34;, \u0026#34;session_line_num\u0026#34;, \u0026#34;command_tag\u0026#34;, \u0026#34;session_start_time\u0026#34;, \u0026#34;virtual_transaction_id\u0026#34;, \u0026#34;transaction_id\u0026#34;, \u0026#34;error_severity\u0026#34;, \u0026#34;sql_state_code\u0026#34;, \u0026#34;events\u0026#34;, \u0026#34;detail\u0026#34;, \u0026#34;hint\u0026#34;, \u0026#34;internal_query\u0026#34;, \u0026#34;internal_query_pos\u0026#34;, \u0026#34;context\u0026#34;, \u0026#34;query\u0026#34;, \u0026#34;query_pos\u0026#34;, \u0026#34;location\u0026#34;, \u0026#34;application_name\u0026#34;, \u0026#34;backend_type\u0026#34;, \u0026#34;leader_pid\u0026#34;, \u0026#34;operationid\u0026#34; ] quote_char =\u0026gt; \u0026#39;\u0026#34;\u0026#39; remove_field =\u0026gt; [\u0026#34;message\u0026#34;] } # Обработка временных меток date { match =\u0026gt; [\u0026#34;timestamp\u0026#34;, \u0026#34;yyyy-MM-dd HH:mm:ss.SSS\u0026#34;] timezone =\u0026gt; \u0026#34;Europe/Moscow\u0026#34; target =\u0026gt; \u0026#34;@timestamp\u0026#34; remove_field =\u0026gt; [\u0026#34;timestamp\u0026#34;] } # Обработка многострочных сообщений mutate { gsub =\u0026gt; [\u0026#34;message\u0026#34;, \u0026#34;\\n\u0026#34;, \u0026#34; \u0026#34;] } } } Фильтр для Patroni:\n1 2 3 4 5 6 7 8 9 10 # Фильтр для Patroni логов if [type] == \u0026#34;patroni_log\u0026#34; { grok { match =\u0026gt; { \u0026#34;message\u0026#34; =\u0026gt; \u0026#34;%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel}: %{GREEDYDATA:events}\u0026#34; } } date { match =\u0026gt; [ \u0026#34;timestamp\u0026#34;, \u0026#34;yyyy-MM-dd HH:mm:ss,SSS\u0026#34; ] target =\u0026gt; \u0026#34;@timestamp\u0026#34; } } Фильтр для MySQL:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Фильтр для MySQL логов if [type] == \u0026#34;mysql_log\u0026#34; { grok { match =\u0026gt; { \u0026#34;message\u0026#34; =\u0026gt; [ \u0026#34;%{TIMESTAMP_ISO8601:timestamp}\\s%{NUMBER:thread_id}\\s\\[%{WORD:loglevel}\\]\\s\\[%{DATA:error_code}\\]\\s\\[%{DATA:component}\\]\\s%{GREEDYDATA:log_message}\u0026#34; ] remove_field =\u0026gt; [\u0026#34;message\u0026#34;] } } # Преобразуем timestamp в стандартный формат date { match =\u0026gt; [\u0026#34;timestamp\u0026#34;, \u0026#34;yyyy-MM-dd\u0026#39;T\u0026#39;HH:mm:ss.SSSSSSZ\u0026#34;] target =\u0026gt; \u0026#34;@timestamp\u0026#34; } } Фильтр для ClickHouse:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Фильтр для ClickHouse логов if [type] == \u0026#34;clickhouse_log\u0026#34; { grok { match =\u0026gt; { \u0026#34;message\u0026#34; =\u0026gt; [ \u0026#34;%{YEAR:year}.%{MONTHNUM:month}.%{MONTHDAY:day} %{HOUR:hour}:%{MINUTE:minute}:%{SECOND:second}\\.%{INT:microseconds}\\s\\[\\s*%{NUMBER:thread_id}\\s*\\]\\s{}\\s\\\u0026lt;%{WORD:loglevel}\\\u0026gt;\\s%{WORD:application}:\\s*%{GREEDYDATA:log_message}\u0026#34; ] } } mutate { add_field =\u0026gt; { \u0026#34;timestamp\u0026#34; =\u0026gt; \u0026#34;%{year}-%{month}-%{day} %{hour}:%{minute}:%{second}.%{microseconds}\u0026#34; } remove_field =\u0026gt; [\u0026#34;year\u0026#34;, \u0026#34;month\u0026#34;, \u0026#34;day\u0026#34;, \u0026#34;hour\u0026#34;, \u0026#34;minute\u0026#34;, \u0026#34;second\u0026#34;, \u0026#34;microseconds\u0026#34;, \u0026#34;message\u0026#34;] } Фильтр для Redis:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Фильтр для Redis логов if [type] == \u0026#34;redis_log\u0026#34; { grok { match =\u0026gt; { \u0026#34;message\u0026#34; =\u0026gt; [ \u0026#34;%{NUMBER:pid}:%{NOTSPACE:log_type} \\(%{NUMBER:unix_timestamp:int}\\) %{GREEDYDATA:events}\u0026#34;, \u0026#34;%{NUMBER:pid}:%{WORD:log_type} %{MONTHDAY} %{MONTH} %{YEAR} %{TIME} %{DATA:symbol} %{GREEDYDATA:events}\u0026#34; ] } remove_field =\u0026gt; [\u0026#34;message\u0026#34;] } # Применение фильтра date к каждому полю с временными метками date { match =\u0026gt; [ \u0026#34;timestamp\u0026#34;, \u0026#34;yyyy-MM-dd HH:mm:ss,SSS\u0026#34; ] target =\u0026gt; \u0026#34;@timestamp\u0026#34; } mutate { remove_field =\u0026gt; [\u0026#34;@version\u0026#34;, \u0026#34;path\u0026#34;, \u0026#34;host\u0026#34;] } } Проверка на валидность конфигураций Logstash\n1 sudo /usr/share/logstash/bin/logstash --config.test_and_exit -f /etc/logstash/conf.d/ Полезный сервис для диагностики и отладки фильтров grok Grok Debugger\n","date":"2024-06-09T00:00:00Z","image":"http://localhost:1313/p/%D1%84%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B-logstash-%D0%B4%D0%BB%D1%8F-%D1%81%D0%B1%D0%BE%D1%80%D0%B0-%D0%BB%D0%BE%D0%B3%D0%BE%D0%B2-%D0%B1%D0%B0%D0%B7-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D0%B2-elk/20241123141407_hu65b8741f9e04ade1060e02dfec487d02_93585_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/%D1%84%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B-logstash-%D0%B4%D0%BB%D1%8F-%D1%81%D0%B1%D0%BE%D1%80%D0%B0-%D0%BB%D0%BE%D0%B3%D0%BE%D0%B2-%D0%B1%D0%B0%D0%B7-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D0%B2-elk/","title":"Фильтры Logstash для сбора логов баз данных в ELK"},{"content":"Rundeck — это программное обеспечение для управления автоматизацией операций. Оно позволяет создавать, планировать и управлять задачами автоматизации в инфраструктуре. Автоматизация возможна как в Linux-среде, так и в Windows.\nУстановка Rundeck 5.2.0 на Debian 12 Обновляем ОС 1 sudo apt -qq update -y \u0026amp;\u0026amp; sudo apt -qq upgrade -y Устанавливаем Java 1 sudo apt install default-jre Проверяем установку Java 1 java --version Так как в РФ напрямую недоступно ПО, скачиваем по VPN с официального сайта deb-пакет. Загружаем пакет на хост: 1 scp ./rundeck_5.2.0.20240410-1_all.deb user@192.168.122.237:/home/user/ Устанавливаем Rundeck 1 sudo dpkg -i rundeck_5.2.0.20240410-1_all.deb Настраиваем конфигурационный файл Необходимо изменить параметр grails.serverURL, указав IP-адрес сервера либо его DNS-имя (добавив его в DNS-записи или файл hosts).\n1 nano /etc/rundeck/rundeck-config.properties Запускаем службу и включаем автозапуск 1 systemctl start rundeckd.service \u0026amp;\u0026amp; systemctl enable rundeckd.service Логин/пароль по умолчанию: admin/admin.\nСоздадим первый проект.\nВ следующей статье разберём примеры задач.\n","date":"2024-05-18T00:00:00Z","image":"http://localhost:1313/p/%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-rundeck-5.2.0-%D0%BD%D0%B0-debian-12/20240518220659_hu20326199076f57eae73c1f3050ce8348_67046_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-rundeck-5.2.0-%D0%BD%D0%B0-debian-12/","title":"Установка Rundeck 5.2.0 на Debian 12"}]